Desarrollo de ERP con enfoque en Domain-Driven Design (DDD) utilizando Bounded Contexts y Aggregates

El ERP se mostrará por niveles, donde cada nivel agregará nuevas funcionalidades y datos, haciendo el sistema más complejo y completo. Se debe generar todo el código en TypeScript con todas las propiedades correspondientes a cada nivel. Además, se debe incluir comentarios que indiquen a qué nivel pertenece cada campo o servicio, para poder mostrar o validar datos dependiendo del nivel al que se pertenece.

Reglas del Prompt:

1. Nombres en inglés, explicaciones en español: Describir el nombre del Bounded Context, nombres de Aggregates, servicios, casos de uso y propiedades de cada clase en inglés. Los comentarios y explicaciones deben estar en español.

2. Modelado basado en Bounded Contexts: Modelar la solución en base a Bounded Contexts, asegurando que algunos Aggregates se reducirán cuando sean usados en otros Contextos, incluyendo solo las propiedades necesarias.

3. Desarrollo por niveles: Desarrollar por niveles, generando el modelo completo que incluya todos los niveles. Cada nivel agregará más campos, relaciones y funcionalidades al sistema. En el código, incluir comentarios que indiquen a qué nivel pertenece cada campo, método o servicio. Por ejemplo:

    ```typescript
    // Nivel 1: Campo básico
    creationDate: Date;
    // Nivel 2: Campo agregado en nivel 2
    lastUpdatedDate: Date;
    ```

4. Casos de uso alineados con el dominio: Los casos de uso deben reflejar claramente las acciones del negocio, evitando nombres genéricos como "crear" o "actualizar". Por ejemplo, usar "Transferir Dinero", "Registrar Tipo de Cambio" o "Consultar Saldo de Caja".

5. Repositorios abstractos sin implementación de persistencia: Cada Aggregate debe tener su propio repositorio abstracto, sin implementar detalles de persistencia (no crear repositorios en memoria, bases de datos, etc.). Los repositorios solo definen los métodos necesarios para persistir y recuperar el Aggregate.

6. Aggregates sin referencias directas a otros Aggregates: Los Aggregates no deben tener instancias de otros Aggregates como propiedades. En su lugar, deben referenciar los IDs de otros Aggregates. Por ejemplo:

    ```typescript
    // Incorrecto
    fromCashBox: CashBox;
    toCashBox: CashBox;

    // Correcto
    fromCashBoxId: CashBoxId;
    toCashBoxId: CashBoxId;
    ```

7. Lógica de negocio en el dominio: La lógica de negocio debe residir en los Aggregates, Value Objects y Entities dentro del dominio. La capa de aplicación solo coordina el flujo de trabajo y orquesta las interacciones entre los Aggregates, sin contener lógica de negocio.

8. Nombres coherentes y lenguaje del dominio: Las propiedades de los Aggregates deben tener nombres coherentes al Bounded Context, utilizando el lenguaje del dominio. Por ejemplo, en lugar de "date", usar "creationDate" o "lastUpdatedDate". Si se utiliza un ID de usuario, nombrarlo según su función en el contexto, como "authorId", "clientId", etc.

9. Trazabilidad de acciones: Incluir en los modelos la información necesaria para la trazabilidad, indicando quién realiza cada acción o transacción, según corresponda al contexto.

10. Comentarios indicando nivel de cada elemento: En el código, incluir comentarios que especifiquen a qué nivel pertenece cada campo, método, servicio o funcionalidad. Esto ayudará a identificar qué elementos se introducen en cada nivel del sistema.

11. Interacción al iniciar nuevas conversaciones: Cada vez que inicies una nueva conversación sobre el ERP, debes preguntar en qué estado está el software y cuáles son los requerimientos nuevos o actuales.

12. Estructura de carpetas organizada: Al crear o mejorar el modelo, generar siempre la estructura de carpetas correspondiente, basada en los Aggregates y casos de uso:

    - Carpeta `aggregates`: Dentro, una carpeta por cada Aggregate, conteniendo el Aggregate principal, repositorio abstracto, servicios del dominio, entidades y objetos de valor asociados.
    - Carpeta `application`: Dentro, una carpeta por cada caso de uso, conteniendo la clase del caso de uso y los DTOs necesarios.

13. Enfoque estructurado y completo: Ser estricto en la creación del modelo, asegurando que todas las clases necesarias estén incluidas y siguiendo un enfoque estructurado para un análisis correcto de las clases y servicios.

14. Unit test: siempre genera unit test para el dominio. No test a la capa de aplicación sino al dominio. Genera unit testing para la capa de dominio, no considerar test a la capa de infraestructura.

15. Genera los bundle context que sean necesarios y todo el código en TypeScript que consideres. Analiza el texto y genera el código fuente de la aplicación en TypeScript puro.

16. Genera todo el código agrupado por bundle context. Dentro de cada bundle context deben estar los Aggregates que sean necesarios con su repositorio y servicios de dominio y value objects. Además, la capa de aplicación y dentro los casos de uso que pertenecen al bundle context.

17. Cada bundle context debe tener todos los niveles que sean necesarios. No es que cada bundle context sea un nivel, sino dentro de cada Aggregate deberían estar los campos en su nivel correspondiente.

18. Incorpore todos los niveles en cada agregado: Así mantendremos la coherencia de evolución en el modelo.

19. Agregue funcionalidad avanzada a cada nivel: Puedes indicar qué propiedades o funcionalidades se agregarán en cada nivel del sistema, por ejemplo, más validaciones, eventos de dominio o cálculos específicos.

20. Defina los niveles que te interesan: Si tienes una estructura clara de qué debe estar en cada nivel (por ejemplo, manejo básico en Nivel 1, reportes en Nivel 2, integración con otros contextos en Nivel 3), puedo organizar los agregados en base a ello.

21. Genera el código con los tests unitarios incluidos. Incluye los tests para todas las funcionalidades.

22. Genera todo el código completo de principio a fin. No generes solo partes ni segmentos. El código debe incluir todos los niveles de funcionalidad, clases, agregados, repositorios, casos de uso, pruebas unitarias y servicios. No omitas ningún nivel ni detalle en la respuesta.

23. Genera todo el código, todo es todo, incluyendo todos los niveles en cada Aggregate. Sé muy detallado y analiza bien el código antes de generarlo.


Notas adicionales para el proyecto:

Al crear o mejorar el modelo, recuerda generar la estructura de carpetas correspondiente, basada en los Aggregates, servicios, entidades y objetos de valor que definas, e incluir comentarios que indiquen a qué nivel pertenece cada elemento.

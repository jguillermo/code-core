import 'reflect-metadata';
import {
    Allow,
    ArrayContains,
    ArrayMaxSize,
    ArrayMinSize,
    ArrayNotContains,
    ArrayNotEmpty,
    ArrayUnique,
    Contains,
    Equals,
    IsAlpha,
    IsAlphanumeric,
    IsArray,
    IsAscii,
    IsBase32,
    IsBase58,
    IsBase64,
    IsBIC,
    IsBoolean,
    IsBooleanString,
    IsBtcAddress,
    IsByteLength,
    IsCreditCard,
    IsCurrency,
    IsDataURI,
    IsDate,
    IsDateString,
    IsDecimal,
    IsDefined,
    IsDivisibleBy,
    IsEAN,
    IsEmail,
    IsEmpty,
    IsEnum,
    IsEthereumAddress,
    IsFirebasePushId,
    IsFQDN,
    IsFullWidth,
    IsHalfWidth,
    IsHash,
    IsHexadecimal,
    IsHexColor,
    IsHSL,
    IsIBAN,
    IsIdentityCard,
    IsIn,
    IsInstance,
    IsInt,
    IsIP,
    IsISBN,
    IsISIN,
    IsISO31661Alpha2,
    IsISO31661Alpha3,
    IsISO4217CurrencyCode,
    IsISO8601,
    IsISRC,
    IsISSN,
    IsJSON,
    IsJWT,
    IsLatitude,
    IsLatLong,
    IsLocale,
    IsLongitude,
    IsLowercase,
    IsMACAddress,
    IsMagnetURI,
    IsMilitaryTime,
    IsMimeType,
    IsMobilePhone,
    IsMongoId,
    IsMultibyte,
    IsNegative,
    IsNotEmpty,
    IsNotEmptyObject,
    IsNotIn,
    IsNumber,
    IsNumberString,
    IsObject,
    IsOctal,
    IsOptional,
    IsPassportNumber,
    IsPhoneNumber,
    IsPort,
    IsPositive,
    IsPostalCode,
    IsRFC3339,
    IsRgbColor,
    IsSemVer,
    IsString,
    IsStrongPassword,
    IsSurrogatePair,
    IsTaxId,
    IsTimeZone,
    IsUppercase,
    IsUrl,
    IsUUID,
    IsVariableWidth,
    Length,
    Matches,
    Max,
    MaxDate,
    MaxLength,
    Min,
    MinDate,
    MinLength,
    NotContains,
    NotEquals,
    ValidationOptions
} from 'class-validator';

const validatorsMap = {
    min: Min,
    max: Max,
    isEmail: IsEmail,
    isDefined: IsDefined,
    isOptional: IsOptional,
    equals: Equals,
    notEquals: NotEquals,
    isEmpty: IsEmpty,
    isNotEmpty: IsNotEmpty,
    isIn: IsIn,
    isNotIn: IsNotIn,
    isBoolean: IsBoolean,
    isDate: IsDate,
    isString: IsString,
    isNumber: IsNumber,
    isInt: IsInt,
    isArray: IsArray,
    isEnum: IsEnum,
    isDivisibleBy: IsDivisibleBy,
    isPositive: IsPositive,
    isNegative: IsNegative,
    minDate: MinDate,
    maxDate: MaxDate,
    isBooleanString: IsBooleanString,
    isDateString: IsDateString,
    isNumberString: IsNumberString,
    contains: Contains,
    notContains: NotContains,
    isAlpha: IsAlpha,
    isAlphanumeric: IsAlphanumeric,
    isDecimal: IsDecimal,
    isAscii: IsAscii,
    isBase32: IsBase32,
    isBase58: IsBase58,
    isBase64: IsBase64,
    isIBAN: IsIBAN,
    isBIC: IsBIC,
    isByteLength: IsByteLength,
    isCreditCard: IsCreditCard,
    isCurrency: IsCurrency,
    isISO4217CurrencyCode: IsISO4217CurrencyCode,
    isEthereumAddress: IsEthereumAddress,
    isBtcAddress: IsBtcAddress,
    isDataURI: IsDataURI,
    isFQDN: IsFQDN,
    isFullWidth: IsFullWidth,
    isHalfWidth: IsHalfWidth,
    isVariableWidth: IsVariableWidth,
    isHexColor: IsHexColor,
    isHSL: IsHSL,
    isRgbColor: IsRgbColor,
    isIdentityCard: IsIdentityCard,
    isPassportNumber: IsPassportNumber,
    isPostalCode: IsPostalCode,
    isHexadecimal: IsHexadecimal,
    isOctal: IsOctal,
    isMACAddress: IsMACAddress,
    isIP: IsIP,
    isPort: IsPort,
    isISBN: IsISBN,
    isEAN: IsEAN,
    isISIN: IsISIN,
    isISO8601: IsISO8601,
    isJSON: IsJSON,
    isJWT: IsJWT,
    isObject: IsObject,
    isNotEmptyObject: IsNotEmptyObject,
    isLowercase: IsLowercase,
    isLatLong: IsLatLong,
    isLatitude: IsLatitude,
    isLongitude: IsLongitude,
    isMobilePhone: IsMobilePhone,
    isISO31661Alpha2: IsISO31661Alpha2,
    isISO31661Alpha3: IsISO31661Alpha3,
    isLocale: IsLocale,
    isPhoneNumber: IsPhoneNumber,
    isMongoId: IsMongoId,
    isMultibyte: IsMultibyte,
    isSurrogatePair: IsSurrogatePair,
    isTaxId: IsTaxId,
    isUrl: IsUrl,
    isMagnetURI: IsMagnetURI,
    isUUID: IsUUID,
    isFirebasePushId: IsFirebasePushId,
    isUppercase: IsUppercase,
    length: Length,
    minLength: MinLength,
    maxLength: MaxLength,
    matches: Matches,
    isMilitaryTime: IsMilitaryTime,
    isTimeZone: IsTimeZone,
    isHash: IsHash,
    isMimeType: IsMimeType,
    isSemVer: IsSemVer,
    isISSN: IsISSN,
    isISRC: IsISRC,
    isRFC3339: IsRFC3339,
    isStrongPassword: IsStrongPassword,
    arrayContains: ArrayContains,
    arrayNotContains: ArrayNotContains,
    arrayNotEmpty: ArrayNotEmpty,
    arrayMinSize: ArrayMinSize,
    arrayMaxSize: ArrayMaxSize,
    arrayUnique: ArrayUnique,
    isInstance: IsInstance,
    allow: Allow
};

interface ValidatorMapI {
    validator: keyof typeof validatorsMap,
    value?: any,
    options?: ValidationOptions
}

export function AddValidate(validatorConfigs: ValidatorMapI[], propertyKey: string='_value') {

    return function (constructor: Function) {
        validatorConfigs.forEach(config => {
            const validator: any = validatorsMap[config.validator];
            if (!validator) {
                console.warn(`Validator ${config.validator} is not supported.`);
            }
            if (config.value) {
                validator(config.value, config.options)(constructor.prototype, propertyKey);
            } else {
                validator(config.options)(constructor.prototype, propertyKey);
            }
        });
    }
}
